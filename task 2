Document Object:
The document object represents a web page that is loaded in the browser. By accessing the document object, we can access the element in the HTML page. With the help of document objects, we can add dynamic content to our web page. The document object can be accessed with a window.document or just document.
The Document Object Model (DOM) is a platform-neutral interface that enables dynamic access and updating of a document’s content, structure, and style by programs and scripts.The DOM manipulation tool offers methods to access and manipulate the structure and content of a document, such as getElementById(), querySelector(), createElement(), and innerHTML. It represents the entire HTML document as a node tree, with the Document object as the root node. It allows dynamic updates and interactions with web page content.
To Change the inner HTML of an element and Change the attribute value of an HTML element are some of the properties of Document Object Model.It also create and remove HTML elements.
Properties:
activeElement: It returns the currently active elements in the document.
body: It returns the contents of the body element.
anchors: It returns all  elements that have a name attribute.
baseURI: It returns a string value that represents the base URI of the document.
cookie: It returns the cookie of the current document.
charSet: It returns a string, representing the document’s character encoding.
defaultView: It returns the current Window Object.
designMode: It is used to set documents as editable or read-only.
Methods:
addEventListener: It is used to attach an event handler to the specified element.
adoptNode: It is used to adopt a node from another document and it returns a node object, representing the adopted node.
close: It is used to close the output stream.
createAttribute: It is used to create an attribute node with the specified name and returns the attribute object.
createComment: It is used to create a comment node with some text.
createDocumentFragment: It is used to create the document fragment to change the content of the document.
Window Object:
The window object is the topmost object of the DOM hierarchy. It represents a browser window or frame that displays the contents of the webpage. Whenever a window appears on the screen to display the contents of the document, the window object is created. The window object, supported by all browsers, represents the browser’s window and automatically includes global JavaScript objects, functions, and variables as members.The Window object is responsible for managing global variables, functions, and objects, providing methods for browser interaction and managing properties related to frames, tabs, or windows, such as alert, confirm, setTimeout, and setInterval. The inner height of the browser window (in pixels) and  inner width of the browser window (in pixels) are some of the properties in window.
Properties:
Closed: It holds a Boolean value that represents whether the window is closed or not.
console: It returns a reference to the console object which provides access to the browser’s debugging console.
defaultStatus: It is used to define the default message that will be displayed in the status bar when no activity is carried on by the browser.
controllers: It returns the XUL controller objects for the current Chrome window.
customElements: It returns a reference to the CustomElementRegistry object, which can be used to register new custom elements and also get information about already registered custom elements.
crypto: It returns the browser crypto object.
Methods:
alert: It is used to display an alert box. It displays a specified message along with an OK button and is generally used to make sure that the information comes through the user.
atob: It is used for decoding a base-64 encoded string. It is used to decode a string of data that has been encoded using the btoa() method.
blur: It is used to remove focus from the current window.
btoa: It is used for encoding a string in base-64 format.
clearInterval: It clears the interval which has been set by the setInterval() function before that.
clearTimeout: It clears the timeout which has been set by the setTimeout()function before that.
close: It is used for closing a certain window or tab of the browser which was previously opened.
confirm: It is used to display a modal dialog with an optional message and two buttons i.e. OK and Cancel. It returns true if the user clicks “OK”, and false otherwise.